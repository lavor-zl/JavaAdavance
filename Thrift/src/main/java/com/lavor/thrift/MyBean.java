/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lavor.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 定义结构体struct相当于Java中的JavaBean
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-09-03")
public class MyBean implements org.apache.thrift.TBase<MyBean, MyBean._Fields>, java.io.Serializable, Cloneable, Comparable<MyBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MyBean");

  private static final org.apache.thrift.protocol.TField BOOLEARN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolearnType", org.apache.thrift.protocol.TType.BOOL, (short)-1);
  private static final org.apache.thrift.protocol.TField BYTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("byteType", org.apache.thrift.protocol.TType.BYTE, (short)-2);
  private static final org.apache.thrift.protocol.TField SHORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("shortType", org.apache.thrift.protocol.TType.I16, (short)-3);
  private static final org.apache.thrift.protocol.TField INT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("intType", org.apache.thrift.protocol.TType.I32, (short)-4);
  private static final org.apache.thrift.protocol.TField LONG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("longType", org.apache.thrift.protocol.TType.I64, (short)-5);
  private static final org.apache.thrift.protocol.TField DOUBLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleType", org.apache.thrift.protocol.TType.DOUBLE, (short)-6);
  private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)-7);
  private static final org.apache.thrift.protocol.TField STRING_LIST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringListType", org.apache.thrift.protocol.TType.STRING, (short)-8);
  private static final org.apache.thrift.protocol.TField ARRAY_LIST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrayListType", org.apache.thrift.protocol.TType.LIST, (short)-9);
  private static final org.apache.thrift.protocol.TField HASH_SET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hashSetType", org.apache.thrift.protocol.TType.SET, (short)-10);
  private static final org.apache.thrift.protocol.TField HASH_MAP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hashMapType", org.apache.thrift.protocol.TType.MAP, (short)-11);
  private static final org.apache.thrift.protocol.TField BUFFER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bufferType", org.apache.thrift.protocol.TType.STRING, (short)-12);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MyBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MyBeanTupleSchemeFactory());
  }

  public boolean boolearnType; // required
  public byte byteType; // required
  public short shortType; // required
  public int intType; // required
  public long longType; // required
  public double doubleType; // required
  public String stringType; // required
  public String stringListType; // required
  public List<Integer> arrayListType; // required
  public Set<String> hashSetType; // required
  public Map<String,String> hashMapType; // required
  public ByteBuffer bufferType; // required
  public int number; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOLEARN_TYPE((short)-1, "boolearnType"),
    BYTE_TYPE((short)-2, "byteType"),
    SHORT_TYPE((short)-3, "shortType"),
    INT_TYPE((short)-4, "intType"),
    LONG_TYPE((short)-5, "longType"),
    DOUBLE_TYPE((short)-6, "doubleType"),
    STRING_TYPE((short)-7, "stringType"),
    STRING_LIST_TYPE((short)-8, "stringListType"),
    ARRAY_LIST_TYPE((short)-9, "arrayListType"),
    HASH_SET_TYPE((short)-10, "hashSetType"),
    HASH_MAP_TYPE((short)-11, "hashMapType"),
    BUFFER_TYPE((short)-12, "bufferType"),
    NUMBER((short)1, "number");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case -1: // BOOLEARN_TYPE
          return BOOLEARN_TYPE;
        case -2: // BYTE_TYPE
          return BYTE_TYPE;
        case -3: // SHORT_TYPE
          return SHORT_TYPE;
        case -4: // INT_TYPE
          return INT_TYPE;
        case -5: // LONG_TYPE
          return LONG_TYPE;
        case -6: // DOUBLE_TYPE
          return DOUBLE_TYPE;
        case -7: // STRING_TYPE
          return STRING_TYPE;
        case -8: // STRING_LIST_TYPE
          return STRING_LIST_TYPE;
        case -9: // ARRAY_LIST_TYPE
          return ARRAY_LIST_TYPE;
        case -10: // HASH_SET_TYPE
          return HASH_SET_TYPE;
        case -11: // HASH_MAP_TYPE
          return HASH_MAP_TYPE;
        case -12: // BUFFER_TYPE
          return BUFFER_TYPE;
        case 1: // NUMBER
          return NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLEARNTYPE_ISSET_ID = 0;
  private static final int __BYTETYPE_ISSET_ID = 1;
  private static final int __SHORTTYPE_ISSET_ID = 2;
  private static final int __INTTYPE_ISSET_ID = 3;
  private static final int __LONGTYPE_ISSET_ID = 4;
  private static final int __DOUBLETYPE_ISSET_ID = 5;
  private static final int __NUMBER_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOLEARN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("boolearnType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("byteType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SHORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("shortType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("intType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("longType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("doubleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING_LIST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringListType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARRAY_LIST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("arrayListType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.HASH_SET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hashSetType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HASH_MAP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hashMapType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BUFFER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bufferType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MyBean.class, metaDataMap);
  }

  public MyBean() {
  }

  public MyBean(
    boolean boolearnType,
    byte byteType,
    short shortType,
    int intType,
    long longType,
    double doubleType,
    String stringType,
    String stringListType,
    List<Integer> arrayListType,
    Set<String> hashSetType,
    Map<String,String> hashMapType,
    ByteBuffer bufferType,
    int number)
  {
    this();
    this.boolearnType = boolearnType;
    setBoolearnTypeIsSet(true);
    this.byteType = byteType;
    setByteTypeIsSet(true);
    this.shortType = shortType;
    setShortTypeIsSet(true);
    this.intType = intType;
    setIntTypeIsSet(true);
    this.longType = longType;
    setLongTypeIsSet(true);
    this.doubleType = doubleType;
    setDoubleTypeIsSet(true);
    this.stringType = stringType;
    this.stringListType = stringListType;
    this.arrayListType = arrayListType;
    this.hashSetType = hashSetType;
    this.hashMapType = hashMapType;
    this.bufferType = org.apache.thrift.TBaseHelper.copyBinary(bufferType);
    this.number = number;
    setNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyBean(MyBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boolearnType = other.boolearnType;
    this.byteType = other.byteType;
    this.shortType = other.shortType;
    this.intType = other.intType;
    this.longType = other.longType;
    this.doubleType = other.doubleType;
    if (other.isSetStringType()) {
      this.stringType = other.stringType;
    }
    if (other.isSetStringListType()) {
      this.stringListType = other.stringListType;
    }
    if (other.isSetArrayListType()) {
      List<Integer> __this__arrayListType = new ArrayList<Integer>(other.arrayListType);
      this.arrayListType = __this__arrayListType;
    }
    if (other.isSetHashSetType()) {
      Set<String> __this__hashSetType = new HashSet<String>(other.hashSetType);
      this.hashSetType = __this__hashSetType;
    }
    if (other.isSetHashMapType()) {
      Map<String,String> __this__hashMapType = new HashMap<String,String>(other.hashMapType);
      this.hashMapType = __this__hashMapType;
    }
    if (other.isSetBufferType()) {
      this.bufferType = org.apache.thrift.TBaseHelper.copyBinary(other.bufferType);
    }
    this.number = other.number;
  }

  public MyBean deepCopy() {
    return new MyBean(this);
  }

  @Override
  public void clear() {
    setBoolearnTypeIsSet(false);
    this.boolearnType = false;
    setByteTypeIsSet(false);
    this.byteType = 0;
    setShortTypeIsSet(false);
    this.shortType = 0;
    setIntTypeIsSet(false);
    this.intType = 0;
    setLongTypeIsSet(false);
    this.longType = 0;
    setDoubleTypeIsSet(false);
    this.doubleType = 0.0;
    this.stringType = null;
    this.stringListType = null;
    this.arrayListType = null;
    this.hashSetType = null;
    this.hashMapType = null;
    this.bufferType = null;
    setNumberIsSet(false);
    this.number = 0;
  }

  public boolean isBoolearnType() {
    return this.boolearnType;
  }

  public MyBean setBoolearnType(boolean boolearnType) {
    this.boolearnType = boolearnType;
    setBoolearnTypeIsSet(true);
    return this;
  }

  public void unsetBoolearnType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLEARNTYPE_ISSET_ID);
  }

  /** Returns true if field boolearnType is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolearnType() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLEARNTYPE_ISSET_ID);
  }

  public void setBoolearnTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLEARNTYPE_ISSET_ID, value);
  }

  public byte getByteType() {
    return this.byteType;
  }

  public MyBean setByteType(byte byteType) {
    this.byteType = byteType;
    setByteTypeIsSet(true);
    return this;
  }

  public void unsetByteType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTETYPE_ISSET_ID);
  }

  /** Returns true if field byteType is set (has been assigned a value) and false otherwise */
  public boolean isSetByteType() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTETYPE_ISSET_ID);
  }

  public void setByteTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTETYPE_ISSET_ID, value);
  }

  public short getShortType() {
    return this.shortType;
  }

  public MyBean setShortType(short shortType) {
    this.shortType = shortType;
    setShortTypeIsSet(true);
    return this;
  }

  public void unsetShortType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTTYPE_ISSET_ID);
  }

  /** Returns true if field shortType is set (has been assigned a value) and false otherwise */
  public boolean isSetShortType() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTTYPE_ISSET_ID);
  }

  public void setShortTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTTYPE_ISSET_ID, value);
  }

  public int getIntType() {
    return this.intType;
  }

  public MyBean setIntType(int intType) {
    this.intType = intType;
    setIntTypeIsSet(true);
    return this;
  }

  public void unsetIntType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTTYPE_ISSET_ID);
  }

  /** Returns true if field intType is set (has been assigned a value) and false otherwise */
  public boolean isSetIntType() {
    return EncodingUtils.testBit(__isset_bitfield, __INTTYPE_ISSET_ID);
  }

  public void setIntTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTTYPE_ISSET_ID, value);
  }

  public long getLongType() {
    return this.longType;
  }

  public MyBean setLongType(long longType) {
    this.longType = longType;
    setLongTypeIsSet(true);
    return this;
  }

  public void unsetLongType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGTYPE_ISSET_ID);
  }

  /** Returns true if field longType is set (has been assigned a value) and false otherwise */
  public boolean isSetLongType() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGTYPE_ISSET_ID);
  }

  public void setLongTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGTYPE_ISSET_ID, value);
  }

  public double getDoubleType() {
    return this.doubleType;
  }

  public MyBean setDoubleType(double doubleType) {
    this.doubleType = doubleType;
    setDoubleTypeIsSet(true);
    return this;
  }

  public void unsetDoubleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLETYPE_ISSET_ID);
  }

  /** Returns true if field doubleType is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleType() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLETYPE_ISSET_ID);
  }

  public void setDoubleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLETYPE_ISSET_ID, value);
  }

  public String getStringType() {
    return this.stringType;
  }

  public MyBean setStringType(String stringType) {
    this.stringType = stringType;
    return this;
  }

  public void unsetStringType() {
    this.stringType = null;
  }

  /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
  public boolean isSetStringType() {
    return this.stringType != null;
  }

  public void setStringTypeIsSet(boolean value) {
    if (!value) {
      this.stringType = null;
    }
  }

  public String getStringListType() {
    return this.stringListType;
  }

  public MyBean setStringListType(String stringListType) {
    this.stringListType = stringListType;
    return this;
  }

  public void unsetStringListType() {
    this.stringListType = null;
  }

  /** Returns true if field stringListType is set (has been assigned a value) and false otherwise */
  public boolean isSetStringListType() {
    return this.stringListType != null;
  }

  public void setStringListTypeIsSet(boolean value) {
    if (!value) {
      this.stringListType = null;
    }
  }

  public int getArrayListTypeSize() {
    return (this.arrayListType == null) ? 0 : this.arrayListType.size();
  }

  public java.util.Iterator<Integer> getArrayListTypeIterator() {
    return (this.arrayListType == null) ? null : this.arrayListType.iterator();
  }

  public void addToArrayListType(int elem) {
    if (this.arrayListType == null) {
      this.arrayListType = new ArrayList<Integer>();
    }
    this.arrayListType.add(elem);
  }

  public List<Integer> getArrayListType() {
    return this.arrayListType;
  }

  public MyBean setArrayListType(List<Integer> arrayListType) {
    this.arrayListType = arrayListType;
    return this;
  }

  public void unsetArrayListType() {
    this.arrayListType = null;
  }

  /** Returns true if field arrayListType is set (has been assigned a value) and false otherwise */
  public boolean isSetArrayListType() {
    return this.arrayListType != null;
  }

  public void setArrayListTypeIsSet(boolean value) {
    if (!value) {
      this.arrayListType = null;
    }
  }

  public int getHashSetTypeSize() {
    return (this.hashSetType == null) ? 0 : this.hashSetType.size();
  }

  public java.util.Iterator<String> getHashSetTypeIterator() {
    return (this.hashSetType == null) ? null : this.hashSetType.iterator();
  }

  public void addToHashSetType(String elem) {
    if (this.hashSetType == null) {
      this.hashSetType = new HashSet<String>();
    }
    this.hashSetType.add(elem);
  }

  public Set<String> getHashSetType() {
    return this.hashSetType;
  }

  public MyBean setHashSetType(Set<String> hashSetType) {
    this.hashSetType = hashSetType;
    return this;
  }

  public void unsetHashSetType() {
    this.hashSetType = null;
  }

  /** Returns true if field hashSetType is set (has been assigned a value) and false otherwise */
  public boolean isSetHashSetType() {
    return this.hashSetType != null;
  }

  public void setHashSetTypeIsSet(boolean value) {
    if (!value) {
      this.hashSetType = null;
    }
  }

  public int getHashMapTypeSize() {
    return (this.hashMapType == null) ? 0 : this.hashMapType.size();
  }

  public void putToHashMapType(String key, String val) {
    if (this.hashMapType == null) {
      this.hashMapType = new HashMap<String,String>();
    }
    this.hashMapType.put(key, val);
  }

  public Map<String,String> getHashMapType() {
    return this.hashMapType;
  }

  public MyBean setHashMapType(Map<String,String> hashMapType) {
    this.hashMapType = hashMapType;
    return this;
  }

  public void unsetHashMapType() {
    this.hashMapType = null;
  }

  /** Returns true if field hashMapType is set (has been assigned a value) and false otherwise */
  public boolean isSetHashMapType() {
    return this.hashMapType != null;
  }

  public void setHashMapTypeIsSet(boolean value) {
    if (!value) {
      this.hashMapType = null;
    }
  }

  public byte[] getBufferType() {
    setBufferType(org.apache.thrift.TBaseHelper.rightSize(bufferType));
    return bufferType == null ? null : bufferType.array();
  }

  public ByteBuffer bufferForBufferType() {
    return org.apache.thrift.TBaseHelper.copyBinary(bufferType);
  }

  public MyBean setBufferType(byte[] bufferType) {
    this.bufferType = bufferType == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bufferType, bufferType.length));
    return this;
  }

  public MyBean setBufferType(ByteBuffer bufferType) {
    this.bufferType = org.apache.thrift.TBaseHelper.copyBinary(bufferType);
    return this;
  }

  public void unsetBufferType() {
    this.bufferType = null;
  }

  /** Returns true if field bufferType is set (has been assigned a value) and false otherwise */
  public boolean isSetBufferType() {
    return this.bufferType != null;
  }

  public void setBufferTypeIsSet(boolean value) {
    if (!value) {
      this.bufferType = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public MyBean setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOLEARN_TYPE:
      if (value == null) {
        unsetBoolearnType();
      } else {
        setBoolearnType((Boolean)value);
      }
      break;

    case BYTE_TYPE:
      if (value == null) {
        unsetByteType();
      } else {
        setByteType((Byte)value);
      }
      break;

    case SHORT_TYPE:
      if (value == null) {
        unsetShortType();
      } else {
        setShortType((Short)value);
      }
      break;

    case INT_TYPE:
      if (value == null) {
        unsetIntType();
      } else {
        setIntType((Integer)value);
      }
      break;

    case LONG_TYPE:
      if (value == null) {
        unsetLongType();
      } else {
        setLongType((Long)value);
      }
      break;

    case DOUBLE_TYPE:
      if (value == null) {
        unsetDoubleType();
      } else {
        setDoubleType((Double)value);
      }
      break;

    case STRING_TYPE:
      if (value == null) {
        unsetStringType();
      } else {
        setStringType((String)value);
      }
      break;

    case STRING_LIST_TYPE:
      if (value == null) {
        unsetStringListType();
      } else {
        setStringListType((String)value);
      }
      break;

    case ARRAY_LIST_TYPE:
      if (value == null) {
        unsetArrayListType();
      } else {
        setArrayListType((List<Integer>)value);
      }
      break;

    case HASH_SET_TYPE:
      if (value == null) {
        unsetHashSetType();
      } else {
        setHashSetType((Set<String>)value);
      }
      break;

    case HASH_MAP_TYPE:
      if (value == null) {
        unsetHashMapType();
      } else {
        setHashMapType((Map<String,String>)value);
      }
      break;

    case BUFFER_TYPE:
      if (value == null) {
        unsetBufferType();
      } else {
        setBufferType((ByteBuffer)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOLEARN_TYPE:
      return isBoolearnType();

    case BYTE_TYPE:
      return getByteType();

    case SHORT_TYPE:
      return getShortType();

    case INT_TYPE:
      return getIntType();

    case LONG_TYPE:
      return getLongType();

    case DOUBLE_TYPE:
      return getDoubleType();

    case STRING_TYPE:
      return getStringType();

    case STRING_LIST_TYPE:
      return getStringListType();

    case ARRAY_LIST_TYPE:
      return getArrayListType();

    case HASH_SET_TYPE:
      return getHashSetType();

    case HASH_MAP_TYPE:
      return getHashMapType();

    case BUFFER_TYPE:
      return getBufferType();

    case NUMBER:
      return getNumber();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOLEARN_TYPE:
      return isSetBoolearnType();
    case BYTE_TYPE:
      return isSetByteType();
    case SHORT_TYPE:
      return isSetShortType();
    case INT_TYPE:
      return isSetIntType();
    case LONG_TYPE:
      return isSetLongType();
    case DOUBLE_TYPE:
      return isSetDoubleType();
    case STRING_TYPE:
      return isSetStringType();
    case STRING_LIST_TYPE:
      return isSetStringListType();
    case ARRAY_LIST_TYPE:
      return isSetArrayListType();
    case HASH_SET_TYPE:
      return isSetHashSetType();
    case HASH_MAP_TYPE:
      return isSetHashMapType();
    case BUFFER_TYPE:
      return isSetBufferType();
    case NUMBER:
      return isSetNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MyBean)
      return this.equals((MyBean)that);
    return false;
  }

  public boolean equals(MyBean that) {
    if (that == null)
      return false;

    boolean this_present_boolearnType = true;
    boolean that_present_boolearnType = true;
    if (this_present_boolearnType || that_present_boolearnType) {
      if (!(this_present_boolearnType && that_present_boolearnType))
        return false;
      if (this.boolearnType != that.boolearnType)
        return false;
    }

    boolean this_present_byteType = true;
    boolean that_present_byteType = true;
    if (this_present_byteType || that_present_byteType) {
      if (!(this_present_byteType && that_present_byteType))
        return false;
      if (this.byteType != that.byteType)
        return false;
    }

    boolean this_present_shortType = true;
    boolean that_present_shortType = true;
    if (this_present_shortType || that_present_shortType) {
      if (!(this_present_shortType && that_present_shortType))
        return false;
      if (this.shortType != that.shortType)
        return false;
    }

    boolean this_present_intType = true;
    boolean that_present_intType = true;
    if (this_present_intType || that_present_intType) {
      if (!(this_present_intType && that_present_intType))
        return false;
      if (this.intType != that.intType)
        return false;
    }

    boolean this_present_longType = true;
    boolean that_present_longType = true;
    if (this_present_longType || that_present_longType) {
      if (!(this_present_longType && that_present_longType))
        return false;
      if (this.longType != that.longType)
        return false;
    }

    boolean this_present_doubleType = true;
    boolean that_present_doubleType = true;
    if (this_present_doubleType || that_present_doubleType) {
      if (!(this_present_doubleType && that_present_doubleType))
        return false;
      if (this.doubleType != that.doubleType)
        return false;
    }

    boolean this_present_stringType = true && this.isSetStringType();
    boolean that_present_stringType = true && that.isSetStringType();
    if (this_present_stringType || that_present_stringType) {
      if (!(this_present_stringType && that_present_stringType))
        return false;
      if (!this.stringType.equals(that.stringType))
        return false;
    }

    boolean this_present_stringListType = true && this.isSetStringListType();
    boolean that_present_stringListType = true && that.isSetStringListType();
    if (this_present_stringListType || that_present_stringListType) {
      if (!(this_present_stringListType && that_present_stringListType))
        return false;
      if (!this.stringListType.equals(that.stringListType))
        return false;
    }

    boolean this_present_arrayListType = true && this.isSetArrayListType();
    boolean that_present_arrayListType = true && that.isSetArrayListType();
    if (this_present_arrayListType || that_present_arrayListType) {
      if (!(this_present_arrayListType && that_present_arrayListType))
        return false;
      if (!this.arrayListType.equals(that.arrayListType))
        return false;
    }

    boolean this_present_hashSetType = true && this.isSetHashSetType();
    boolean that_present_hashSetType = true && that.isSetHashSetType();
    if (this_present_hashSetType || that_present_hashSetType) {
      if (!(this_present_hashSetType && that_present_hashSetType))
        return false;
      if (!this.hashSetType.equals(that.hashSetType))
        return false;
    }

    boolean this_present_hashMapType = true && this.isSetHashMapType();
    boolean that_present_hashMapType = true && that.isSetHashMapType();
    if (this_present_hashMapType || that_present_hashMapType) {
      if (!(this_present_hashMapType && that_present_hashMapType))
        return false;
      if (!this.hashMapType.equals(that.hashMapType))
        return false;
    }

    boolean this_present_bufferType = true && this.isSetBufferType();
    boolean that_present_bufferType = true && that.isSetBufferType();
    if (this_present_bufferType || that_present_bufferType) {
      if (!(this_present_bufferType && that_present_bufferType))
        return false;
      if (!this.bufferType.equals(that.bufferType))
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_boolearnType = true;
    list.add(present_boolearnType);
    if (present_boolearnType)
      list.add(boolearnType);

    boolean present_byteType = true;
    list.add(present_byteType);
    if (present_byteType)
      list.add(byteType);

    boolean present_shortType = true;
    list.add(present_shortType);
    if (present_shortType)
      list.add(shortType);

    boolean present_intType = true;
    list.add(present_intType);
    if (present_intType)
      list.add(intType);

    boolean present_longType = true;
    list.add(present_longType);
    if (present_longType)
      list.add(longType);

    boolean present_doubleType = true;
    list.add(present_doubleType);
    if (present_doubleType)
      list.add(doubleType);

    boolean present_stringType = true && (isSetStringType());
    list.add(present_stringType);
    if (present_stringType)
      list.add(stringType);

    boolean present_stringListType = true && (isSetStringListType());
    list.add(present_stringListType);
    if (present_stringListType)
      list.add(stringListType);

    boolean present_arrayListType = true && (isSetArrayListType());
    list.add(present_arrayListType);
    if (present_arrayListType)
      list.add(arrayListType);

    boolean present_hashSetType = true && (isSetHashSetType());
    list.add(present_hashSetType);
    if (present_hashSetType)
      list.add(hashSetType);

    boolean present_hashMapType = true && (isSetHashMapType());
    list.add(present_hashMapType);
    if (present_hashMapType)
      list.add(hashMapType);

    boolean present_bufferType = true && (isSetBufferType());
    list.add(present_bufferType);
    if (present_bufferType)
      list.add(bufferType);

    boolean present_number = true;
    list.add(present_number);
    if (present_number)
      list.add(number);

    return list.hashCode();
  }

  @Override
  public int compareTo(MyBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoolearnType()).compareTo(other.isSetBoolearnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolearnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolearnType, other.boolearnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteType()).compareTo(other.isSetByteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteType, other.byteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortType()).compareTo(other.isSetShortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortType, other.shortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntType()).compareTo(other.isSetIntType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intType, other.intType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongType()).compareTo(other.isSetLongType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longType, other.longType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleType()).compareTo(other.isSetDoubleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleType, other.doubleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringListType()).compareTo(other.isSetStringListType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringListType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringListType, other.stringListType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrayListType()).compareTo(other.isSetArrayListType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrayListType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrayListType, other.arrayListType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashSetType()).compareTo(other.isSetHashSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashSetType, other.hashSetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHashMapType()).compareTo(other.isSetHashMapType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashMapType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashMapType, other.hashMapType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBufferType()).compareTo(other.isSetBufferType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBufferType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bufferType, other.bufferType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MyBean(");
    boolean first = true;

    sb.append("boolearnType:");
    sb.append(this.boolearnType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteType:");
    sb.append(this.byteType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shortType:");
    sb.append(this.shortType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intType:");
    sb.append(this.intType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longType:");
    sb.append(this.longType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleType:");
    sb.append(this.doubleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringType:");
    if (this.stringType == null) {
      sb.append("null");
    } else {
      sb.append(this.stringType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringListType:");
    if (this.stringListType == null) {
      sb.append("null");
    } else {
      sb.append(this.stringListType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrayListType:");
    if (this.arrayListType == null) {
      sb.append("null");
    } else {
      sb.append(this.arrayListType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hashSetType:");
    if (this.hashSetType == null) {
      sb.append("null");
    } else {
      sb.append(this.hashSetType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hashMapType:");
    if (this.hashMapType == null) {
      sb.append("null");
    } else {
      sb.append(this.hashMapType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bufferType:");
    if (this.bufferType == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.bufferType, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MyBeanStandardSchemeFactory implements SchemeFactory {
    public MyBeanStandardScheme getScheme() {
      return new MyBeanStandardScheme();
    }
  }

  private static class MyBeanStandardScheme extends StandardScheme<MyBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MyBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case -1: // BOOLEARN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolearnType = iprot.readBool();
              struct.setBoolearnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -2: // BYTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteType = iprot.readByte();
              struct.setByteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -3: // SHORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.shortType = iprot.readI16();
              struct.setShortTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -4: // INT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intType = iprot.readI32();
              struct.setIntTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -5: // LONG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.longType = iprot.readI64();
              struct.setLongTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -6: // DOUBLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleType = iprot.readDouble();
              struct.setDoubleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -7: // STRING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringType = iprot.readString();
              struct.setStringTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -8: // STRING_LIST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringListType = iprot.readString();
              struct.setStringListTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -9: // ARRAY_LIST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.arrayListType = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.arrayListType.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setArrayListTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -10: // HASH_SET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.hashSetType = new HashSet<String>(2*_set3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.hashSetType.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setHashSetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -11: // HASH_MAP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.hashMapType = new HashMap<String,String>(2*_map6.size);
                String _key7;
                String _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = iprot.readString();
                  struct.hashMapType.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setHashMapTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -12: // BUFFER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bufferType = iprot.readBinary();
              struct.setBufferTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MyBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bufferType != null) {
        oprot.writeFieldBegin(BUFFER_TYPE_FIELD_DESC);
        oprot.writeBinary(struct.bufferType);
        oprot.writeFieldEnd();
      }
      if (struct.hashMapType != null) {
        oprot.writeFieldBegin(HASH_MAP_TYPE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hashMapType.size()));
          for (Map.Entry<String, String> _iter10 : struct.hashMapType.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.hashSetType != null) {
        oprot.writeFieldBegin(HASH_SET_TYPE_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.hashSetType.size()));
          for (String _iter11 : struct.hashSetType)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.arrayListType != null) {
        oprot.writeFieldBegin(ARRAY_LIST_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.arrayListType.size()));
          for (int _iter12 : struct.arrayListType)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringListType != null) {
        oprot.writeFieldBegin(STRING_LIST_TYPE_FIELD_DESC);
        oprot.writeString(struct.stringListType);
        oprot.writeFieldEnd();
      }
      if (struct.stringType != null) {
        oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
        oprot.writeString(struct.stringType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DOUBLE_TYPE_FIELD_DESC);
      oprot.writeDouble(struct.doubleType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_TYPE_FIELD_DESC);
      oprot.writeI64(struct.longType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.intType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHORT_TYPE_FIELD_DESC);
      oprot.writeI16(struct.shortType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.byteType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOLEARN_TYPE_FIELD_DESC);
      oprot.writeBool(struct.boolearnType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI32(struct.number);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MyBeanTupleSchemeFactory implements SchemeFactory {
    public MyBeanTupleScheme getScheme() {
      return new MyBeanTupleScheme();
    }
  }

  private static class MyBeanTupleScheme extends TupleScheme<MyBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MyBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBoolearnType()) {
        optionals.set(0);
      }
      if (struct.isSetByteType()) {
        optionals.set(1);
      }
      if (struct.isSetShortType()) {
        optionals.set(2);
      }
      if (struct.isSetIntType()) {
        optionals.set(3);
      }
      if (struct.isSetLongType()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleType()) {
        optionals.set(5);
      }
      if (struct.isSetStringType()) {
        optionals.set(6);
      }
      if (struct.isSetStringListType()) {
        optionals.set(7);
      }
      if (struct.isSetArrayListType()) {
        optionals.set(8);
      }
      if (struct.isSetHashSetType()) {
        optionals.set(9);
      }
      if (struct.isSetHashMapType()) {
        optionals.set(10);
      }
      if (struct.isSetBufferType()) {
        optionals.set(11);
      }
      if (struct.isSetNumber()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetBoolearnType()) {
        oprot.writeBool(struct.boolearnType);
      }
      if (struct.isSetByteType()) {
        oprot.writeByte(struct.byteType);
      }
      if (struct.isSetShortType()) {
        oprot.writeI16(struct.shortType);
      }
      if (struct.isSetIntType()) {
        oprot.writeI32(struct.intType);
      }
      if (struct.isSetLongType()) {
        oprot.writeI64(struct.longType);
      }
      if (struct.isSetDoubleType()) {
        oprot.writeDouble(struct.doubleType);
      }
      if (struct.isSetStringType()) {
        oprot.writeString(struct.stringType);
      }
      if (struct.isSetStringListType()) {
        oprot.writeString(struct.stringListType);
      }
      if (struct.isSetArrayListType()) {
        {
          oprot.writeI32(struct.arrayListType.size());
          for (int _iter13 : struct.arrayListType)
          {
            oprot.writeI32(_iter13);
          }
        }
      }
      if (struct.isSetHashSetType()) {
        {
          oprot.writeI32(struct.hashSetType.size());
          for (String _iter14 : struct.hashSetType)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetHashMapType()) {
        {
          oprot.writeI32(struct.hashMapType.size());
          for (Map.Entry<String, String> _iter15 : struct.hashMapType.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetBufferType()) {
        oprot.writeBinary(struct.bufferType);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MyBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.boolearnType = iprot.readBool();
        struct.setBoolearnTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.byteType = iprot.readByte();
        struct.setByteTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shortType = iprot.readI16();
        struct.setShortTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.intType = iprot.readI32();
        struct.setIntTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.longType = iprot.readI64();
        struct.setLongTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleType = iprot.readDouble();
        struct.setDoubleTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stringType = iprot.readString();
        struct.setStringTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.stringListType = iprot.readString();
        struct.setStringListTypeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.arrayListType = new ArrayList<Integer>(_list16.size);
          int _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readI32();
            struct.arrayListType.add(_elem17);
          }
        }
        struct.setArrayListTypeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hashSetType = new HashSet<String>(2*_set19.size);
          String _elem20;
          for (int _i21 = 0; _i21 < _set19.size; ++_i21)
          {
            _elem20 = iprot.readString();
            struct.hashSetType.add(_elem20);
          }
        }
        struct.setHashSetTypeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hashMapType = new HashMap<String,String>(2*_map22.size);
          String _key23;
          String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            struct.hashMapType.put(_key23, _val24);
          }
        }
        struct.setHashMapTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.bufferType = iprot.readBinary();
        struct.setBufferTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
    }
  }

}

